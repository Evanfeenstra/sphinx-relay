openapi: 3.1.0
servers:
  - url: //petstore.swagger.io/v2
    description: Default server
  - url: //petstore.swagger.io/sandbox
    description: Sandbox server
info:
  description: |
    This is a sample server for sphinx-relay below you'll find api docs and such

  version: 1.0.0
  title: Swagger Sphinx-Relay
  summary: My lovely API
  termsOfService: 'http://swagger.io/terms/'
  contact:
    name: Sphinx Support
    email: support@stakwork.com
  x-logo:
    url: 'https://miro.medium.com/max/512/1*sAlVjz09nS6f7iYJ6apMhg.png'
    altText: Sphinx-Chat logo
  license:
    name: MIT License
    url: 'https://raw.githubusercontent.com/stakwork/sphinx-relay/master/LICENSE'
    identifier: MIT License
tags:
  - name: tribes
    description: Everything about your Tribes
  - name: store_model
    x-displayName: The Order Model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Order" exampleRef="#/components/examples/Order" showReadOnly={true} showWriteOnly={true} />
x-tagGroups:
  - name: Tribes
    tags:
      - tribe_channel
      - tribes
  - name: Models
    tags:
      - pet_model
      - store_model
paths:
  /tribe_channel:
    parameters:
      - name: x-user-token
        in: header
        description: "this is a token that is used to authenticate the correct user is accesing the relay"
        example: QoiCvW84+Q0E77+wysfj
        required: true
        schema:
          type: string
          default: none
    post:
      tags:
        - tribe_channel
      summary: Add a new channel for tribe in tribe server
      description: Create new tribe text channel.
      operationId: addPet
      responses:
        '405':
          description: Invalid input
      security:
        - authToken:
      x-codeSamples:
        - lang: 'C#'
          source: |
            PetStore.v1.Pet pet = new PetStore.v1.Pet();
            pet.setApiKey("your api key");
            pet.petType = PetStore.v1.Pet.TYPE_DOG;
            pet.name = "Rex";
            // set other fields
            PetStoreResponse response = pet.create();
            if (response.statusCode == HttpStatusCode.Created)
            {
              // Successfully created
            }
            else
            {
              // Something wrong -- check response for errors
              Console.WriteLine(response.getRawResponse());
            }
        - lang: PHP
          source: |
            $form = new \PetStore\Entities\Pet();
            $form->setPetType("Dog");
            $form->setName("Rex");
            // set other fields
            try {
                $pet = $client->pets()->create($form);
            } catch (UnprocessableEntityException $e) {
                var_dump($e->getErrors());
            }
      requestBody:
        $ref: '#/components/requestBodies/Pet'
components:
  pathItems:
    webhooks:
      put:
        summary: Get a cat details after update
        description: Get a cat details after update
        operationId: updatedCat
        tags:
          - webhooks
        requestBody:
          description: Information about cat in the system
          content:
            multipart/form-data:
              schema:
                $ref: "#/components/schemas/Cat"
        responses:
          '200':
            description: update Cat details
      post:
        summary: Create new cat
        description: Info about new cat
        operationId: createdCat
        tags:
          - webhooks
        requestBody:
          description: Information about cat in the system
          content:
            multipart/form-data:
              schema:
                $ref: "#/components/schemas/Cat"
        responses:
          '200':
            description: create Cat details
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Cat:
      description: A representation of a cat
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            huntingSkill:
              type: string
              description: The measured skill for hunting
              default: lazy
              example: adventurous
              enum:
                - clueless
                - lazy
                - adventurous
                - aggressive
          required:
            - huntingSkill
    Category:
      type: object
      properties:
        id:
          description: Category ID
          $ref: '#/components/schemas/Id'
        name:
          description: Category name
          type: string
          minLength: 1
        sub:
          description: Test Sub Category
          type: object
          properties:
            prop1:
              type: string
              description: Dumb Property
      xml:
        name: Category
    Id:
      type: integer
      format: int64
      readOnly: true
    Pet:
      type: object
      required:
        - name
        - photoUrls
      discriminator:
        propertyName: petType
        mapping:
          cat: '#/components/schemas/Cat'
      properties:
        id:
          externalDocs:
            description: "Find more info here"
            url: "https://example.com"
          description: Pet ID
          $ref: '#/components/schemas/Id'
        category:
          description: Categories this pet belongs to
          $ref: '#/components/schemas/Category'
        name:
          description: The name given to a pet
          type: string
          example: Guru
        photoUrls:
          description: The list of URL to a cute photos featuring pet
          type: [string, integer, 'null', array]
          minItems: 1
          maxItems: 20
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
            format: url
        friend:
          $ref: '#/components/schemas/Pet'
        tags:
          description: Tags attached to the pet
          type: array
          exclusiveMaximum: 100
          exclusiveMinimum: 0
          xml:
            name: tag
            wrapped: true
        status:
          type: string
          description: Pet status in the store
          enum:
            - available
            - pending
            - sold
          default: pending
        petType:
          description: Type of a pet
          type: string
      xml:
        name: Pet
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            description: My Pet
            title: Pettie
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            type: 'object'
            properties:
              name:
                type: string
                description: hooray
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    x-auth-token:
      description: |
        This is for accessing your relay, recommended to use x-transport-token instead.
      type: ???
      in: header
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/api/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets
    x-transport-token:
      description: >
        encrypts x-auth-token with the x-transport-token pubkey with timestamp.
      type: ???
      in: header
  examples:
    Order:
      value:
        quantity: 1
        shipDate: '2018-10-19T16:46:45Z'
        status: placed
        complete: false
